package {apiPackage}.auth;

import javax.inject.Inject;
import javax.annotation.PostConstruct;
import javax.ws.rs.Priorities;

import io.quarkus.arc.Priority;
{#if hasHttpBasicMethods}
import io.quarkiverse.openapi.generator.providers.BasicAuthenticationProvider;
{/if}
{#if hasApiKeyMethods}
import io.quarkiverse.openapi.generator.providers.ApiKeyAuthenticationProvider;
import io.quarkiverse.openapi.generator.providers.ApiKeyIn;
{/if}
{#if hasHttpBearerMethods}
import io.quarkiverse.openapi.generator.providers.BearerAuthenticationProvider;
{/if}
import io.quarkiverse.openapi.generator.providers.AbstractCompositeAuthenticationProvider;

@Priority(Priorities.AUTHENTICATION)
public class CompositeAuthenticationProvider extends AbstractCompositeAuthenticationProvider {

    @Inject
    AuthConfiguration authConfig;

    @PostConstruct
    public void init() {
        {#for auth in httpBasicMethods.orEmpty}this.addAuthenticationProvider(new BasicAuthenticationProvider("{auth.name}", authConfig));{/for}
        {#for auth in httpBearerMethods.orEmpty}this.addAuthenticationProvider(new BearerAuthenticationProvider("{auth.name}", "{auth.scheme}", authConfig));{/for}
        {#for auth in apiKeyMethods.orEmpty}
        {#if auth.isKeyInQuery}
        this.addAuthenticationProvider(new ApiKeyAuthenticationProvider("{auth.name}", ApiKeyIn.query, "{auth.keyParamName}", authConfig));
        {/if}
        {#if auth.isKeyInHeader}
        this.addAuthenticationProvider(new ApiKeyAuthenticationProvider("{auth.name}", ApiKeyIn.header, "{auth.keyParamName}", authConfig));
        {/if}
        {#if auth.isKeyInCookie}
        this.addAuthenticationProvider(new ApiKeyAuthenticationProvider("{auth.name}", ApiKeyIn.cookie, "{auth.keyParamName}", authConfig));
        {/if}
        {/for}
    }

}