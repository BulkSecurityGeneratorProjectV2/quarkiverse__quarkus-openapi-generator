package {package};

{#for imp in imports}
import {imp.import};
{/for}

import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;
{#if hasAuthMethods}
import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
{/if}
{#if hasHttpBasicMethods}
import {package}.auth.BasicAuthenticationProvider;
{/if}

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;


{#if appName}
/**
  * {appName}
  * {#if appDescription}<p/>{appDescription}{/if}
  */
{/if}
@Path("{#if useAnnotatedBasePath}{contextPath}{/if}{commonPath}")
@RegisterRestClient
{#if hasHttpBasicMethods}
@RegisterProvider(BasicAuthenticationProvider.class)
{/if}
public interface {classname} {

    {#for op in operations.operation}
    {#if op.summary}
    /**
     * {op.summary}
     *
     {#if op.notes}
     * {op.notes}
     *
     {/if}
     */
    {/if}
    @{op.httpMethod}
    {#if op.subresourceOperation}
    @Path("{op.path}")
    {/if}
    {#if op.hasConsumes}
    @Consumes(\{{#for consume in op.consumes}"{consume.mediaType}"{#if consume_hasNext}, {/if}{/for}\})
    {/if}
    {#if op.hasProduces}
    @Produces(\{{#for produce in op.produces}"{produce.mediaType}"{#if produce_hasNext}, {/if}{/for}\})
    {/if}
    public {#if op.returnType}{op.returnType}{#else}void{/if} {op.nickname}({#for p in op.allParams}{#include pathParams.qute param=p/}{#include queryParams.qute param=p/}{#include bodyParams.qute param=p/}{#include formParams.qute param=p/}{#include headerParams.qute param=p/}{#if p_hasNext}, {/if}{/for});

    {/for}
}